%h1 Duel

= link_to "Start new duel", new_duel_path

= form_tag(pass_duel_url(@duel)) do |f|
  = submit_tag "Pass"

/ possible actions
- available_actions[:play].each do |hand|
  = form_tag(play_duel_url(@duel)) do |f|
    = hidden_field_tag "hand", hand[:source].id
    = hidden_field_tag "key", hand[:action]
    = submit_tag "Use #{hand[:action]} of #{hand[:source].entity.to_text}"
    %i
      %small
        = hand[:source].entity.id

- available_actions[:defend].each do |defend|
  = form_tag(defend_duel_url(@duel)) do |f|
    = hidden_field_tag "source", defend[:source].id
    = hidden_field_tag "target", defend[:target].id
    = submit_tag "Defend #{defend[:source].entity.to_text} (#{defend[:source].entity.id}) with #{defend[:target].entity.to_text} (#{defend[:target].entity.id})"

- available_actions[:ability].each do |ability|
  = form_tag(ability_duel_url(@duel)) do |f|
    = hidden_field_tag "battlefield", ability[:source].id
    = hidden_field_tag "key", ability[:action]
    = submit_tag "Use #{ability[:action]} of #{ability[:source].entity.to_text}"
    %i
      %small
        = ability[:source].entity.id

- if available_attackers.any?
  = form_tag(declare_attackers_duel_url(@duel)) do |f|
    Declare attackers:
    %ul
    - available_attackers.each do |a|
      %li
        %label
          = check_box_tag "attacker[]", a.id
          = a.entity.to_text
    = submit_tag "Declare attackers and pass"

%h4 Turn #{@duel.turn}: Current player #{@duel.current_player_number}, phase #{@duel.phase} (#{@duel.phase_text}), priority player #{@duel.priority_player_number}

- [ @duel.player1, @duel.player2 ].each do |player|
  %h2
    Player #{player.name}
    ( #{player.life} life )
    %small= player.mana

  %h3 Deck ( #{player.deck.count} cards ), graveyard ( #{player.graveyard.count} cards )

  %h3 Hand ( #{player.hand.count} cards )

  %ul
    - player.hand.each do |hand|
      %li
        = hand.entity.to_text
        %small= hand.entity.id

  %h3 Battlefield ( #{player.battlefield.count} cards )

  %ul
    - player.battlefield.each do |battlefield|
      %li
        = battlefield.entity.to_text
        - if battlefield.entity.is_tapped?
          %i (tapped)
        %small= battlefield.entity.id

%h2 Action Log

%ul
  - @duel.last_actions.limit(10).each do |action|
    %li
      [#{@duel.id}.#{action.id}]
      - if action.player
        = action.player.name
      = action.action_text
      - if action.targets.any?
        on
        = action.targets.map { |target| target.effect_string }.join(", ")
