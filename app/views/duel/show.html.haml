/ possible actions
- game_actions.each do |action|
  = form_tag(game_action_duel_url(@duel)) do |f|
    = hidden_field_tag "key", action.key
    = submit_tag action.description

- playable_cards.each do |hand|
  / = form_tag(play_duel_url(@duel)) do |f|
  / = form_tag(play_duel_player_hand_path([@duel, @player, hand.source])) do |f|
  = form_tag(play_duel_player_hand_path(@duel, @player, hand.source)) do |f|
    = hidden_field_tag "hand", hand.source.id
    = hidden_field_tag "key", hand.key
    = hidden_field_tag "target_type", get_target_type(hand.target)
    - if hand.target
      = hidden_field_tag "target", hand.target.id
    = submit_tag hand.description
    %i
      %small
        = hand.source.card.id

- ability_cards.each do |ability|
  = form_tag(ability_duel_url(@duel)) do |f|
    = hidden_field_tag "battlefield", ability.source.id
    = hidden_field_tag "key", ability.key
    = hidden_field_tag "target_type", get_target_type(ability.target)
    - if ability.target
      = hidden_field_tag "target", ability.target.id
    = submit_tag ability.description
    %i
      %small
        = ability.source.card.id

- if available_attackers.any?
  = form_tag(declare_attackers_duel_url(@duel)) do |f|
    Declare attackers:
    %ul
    - available_attackers.each do |a|
      %li
        %label
          = check_box_tag "attacker[]", a.id
          = a.to_text
    = submit_tag "Declare attackers and pass"

- defendable_cards.each do |defend|
  = form_tag(defend_duel_url(@duel)) do |f|
    = hidden_field_tag "source", defend.source.id
    = hidden_field_tag "target", defend.target.id
    = submit_tag defend.description

%h4 Turn #{@duel.turn}: Current player #{@duel.current_player_number}, #{@duel.phase.description}, priority player #{@duel.priority_player_number}

- [ @duel.player1, @duel.player2 ].each do |player|
  %h2
    Player #{player.name}
    ( #{player.life} life )
    %small= player.mana

  %h3 Deck ( #{player.deck.count} cards ), graveyard ( #{player.graveyard.count} cards )

  %h3 Hand ( #{player.hand.count} cards )

  %ul
    - player.hand.each do |hand|
      %li
        = link_to hand.to_text, card_path(hand.card.card_type.metaverse_id)
        %small= hand.card.id

  %h3 Battlefield ( #{player.battlefield.count} cards )

  %ul
    - player.battlefield.each do |battlefield|
      %li
        = link_to battlefield.to_text, card_path(battlefield.card.card_type.metaverse_id)
        - if battlefield.card.is_tapped?
          %i (tapped)
        - if battlefield.card.effects.any?
          %i
            #{pluralize(battlefield.card.effects.count, "effect")}:
            = battlefield.card.effects.map{ |e| e.to_text }.join(", ")

        %small= battlefield.card.id

%h2 Action Log

%ul
  - @duel.action_logs.order(created_at: :desc).limit(10).each do |action|
    %li
      [#{@duel.id}.#{action.id}]
      - if action.player
        = action.player.name
      = action.action_text
      - if action.targets.any?
        on
        = action.targets.map { |target| target.effect_string }.join(", ")
